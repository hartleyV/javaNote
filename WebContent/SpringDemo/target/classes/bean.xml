<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--Spring对bean的管理方式：
        1.创建方式(3种）
        2.bean对象作用范围？？
            scope:
                singleton(单例。默认
                prototype(多例
                request(web应用的请求范围
                session(web应用的会话范围
                global-session(集群环境的作用范围-多个主机共享的session，，当不是集群环境时，即为session
        3.bean对象的生命周期
            singleton
                出生、死亡：随容器

            prototype
                出生：使用对象时才创建bean对象
                死亡：当对象长时间不用&没有别的对象引用时，gc会自动回收
        -->


    <!-- [第一种方式]无其他标签Spring 使用默认构造函数-->
    <!--把对象的创建交给Spring的IOC-->
    <bean id="accountService"
          class="com.spring.couple_demo.service.impl.AccountService"
          scope="prototype"
          init-method="init" destroy-method="destory"
    >
        <!-- 依赖注入
        标签：constructor-arg
        位置：在bean标签内
        属性：
            type：注入数据是数据类型
            index：给构造函数中指定位置的参数赋值（索引0开始
            name：构造函数中指定名称的参数（常用
    -->
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!-- 读取全限定类名，通过反射创建date对象并存入Spring核心容器，通过id可以获取该对象-->
    <bean id="now" class="java.util.Date"></bean>
<!--
    <bean id="accountDao"
          class="com.spring.couple_demo.dao.impl.AccountDao"></bean>
    -->

    <!--[第二种方法]：通过工厂类创建Bean类对象-->
    <!--
    <bean id="factoryInstance" class="com.spring.couple_demo.factory.FactoryInstance"></bean>
    <bean id="accountService" factory-bean="factoryInstance" factory-method="getAccountService"></bean>
    -->


    <!--[第三种方法]：通过某个类中的静态方法创建对象-->
    <!-- --><!--
    <bean id="accountService"
          class="com.spring.couple_demo.factory.StaticFactory"
            factory-method="getAccountService"
    >
    </bean>
    -->


</beans>